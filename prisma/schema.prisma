datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Quiz {
    id        Int      @id @default(autoincrement())
    question  String
    options   String[] @db.VarChar(255) // Assuming each option is a string with a max length
    answer    String   @db.Char(1) // Assuming answer is a single character
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // A quiz should be associated with a collection
    collectionId Int
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    @@map("quiz")
}

model Collection {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    isPinned    Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    Tag    Tag[]
    Quiz   Quiz[]
    QuizHistory QuizHistory[]

    @@map("collection")
}

model Tag {
    id   Int    @id @default(autoincrement())
    name String

    // This should be a reference to a Collection
    collectionId Int?
    collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)
}

model User {
    id            String       @id
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime
    Session       Session[]
    Account       Account[]
    Collection    Collection[]
    QuizHistory   QuizHistory[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model QuizHistory {
    id             Int      @id @default(autoincrement())
    score          Int
    totalQuestions Int
    answers        Json     // Store array of { questionId: number, question: string, options: string[], correctAnswer: string, userAnswer: string, isCorrect: boolean }
    createdAt      DateTime @default(now())
    
    userId         String
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    collectionId   Int
    collection     Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    @@map("quiz_history")
}
